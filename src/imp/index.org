#+Title: Implementation of automating the cluster creation
#+Author: Systems Team
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document contains the implementation of automation of cluster
  creation.
* Implementation
** Automate Base machine setup
*** base-setup role   

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/main.yml
---
# tasks file for basesetup

- include: br0.yml
- include: eth0.yml
- include: step3.yml
- include: br1.yml
- include: step4_commands.yml
- include: ssh-keys.yml
- include: corkscrew_installation.yml


#+End_SRC


#+BEGIN_SRC yml :tangle roles/basesetup/tasks/br0.yml
---
   
   - copy:  
       content: ""      
       dest: "/etc/sysconfig/network-scripts/ifcfg-br0"
   
      
   - name: creating br0 bridge
     blockinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-br0
        block: |
         DEVICE=br0
         BOOTPROTO=static
         ONBOOT=yes
         TYPE=Bridge
         NM_CONTROLLED=no
         IPADDR=10.2.59.220
         NETMASK=255.255.252.0
         GATEWAY=10.2.56.1
         DNS1=10.4.12.160
         DNS2=10.4.12.220
          

...
#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/eth0.yml
---
   
   - copy: 
      content: ""      
      dest: "/etc/sysconfig/network-scripts/ifcfg-eth0" 
  
   - name: creating
     blockinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        block: |
         DEVICE=eth0
         TYPE=Ethernet
         ONBOOT=yes
         NM_CONTROLLED=no
         BOOTPROTO=none
         BRIDGE=br0
          

...
    
#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/step3.yml

---

  - service:
       name: network
       state: restarted
                        

#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/br1.yml
---


   
   - copy: 
      content: ""      
      dest: "/etc/sysconfig/network-scripts/ifcfg-br1"
      
   - name: creating Br1 file
     blockinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-br1
        block: |
         DEVICE=br1
         TYPE=Bridge
         ONBOOT=yes
         NM_CONTROLLED=no
         BOOTPROTO=none


...


#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/step4_commands.yml

---

  
  - service: 
     name: network
     state: restarted

  - name: Running brctl show and output="brctl show"
    command: ifconfig
    register: out

  - debug: var=out.stdout_lines

  - name: Runnig 2nd command
    command: ifconfig
    register: out
  - debug: var=out.stdout_lines 
 
  - name: Manager off
    command: chkconfig NetworkManager off
    register: out
  - debug: var=out.stdout_lines   

  - name: Manager on
    command: chkconfig network on
    register: out
  - debug: var=out.stdout_lines

  - name: Running brctl show command
    command: brctl show
    register: out

  - debug: var=out.stdout_lines     

                


...



#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/ssh-keys.yml

---
- name: ssh-key generate
  user: name=root generate_ssh_key=yes

- name: Strict host check no
  lineinfile: path=/etc/ssh/ssh_config regexp="^Strict.*" line="StrictHostKeyChecking no" state=present
  notify: restart_ssh


#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/corkscrew_installation.yml
- name: dest
  command: pwd && echo "{{corkscrew_dest}}"
  register: out
- debug: var=out.stdout_lines
- name: install pip
  pip: name=passlib
  environment: "{{proxy_env}}"

- name: install wget
  yum: name=wget state=installed
  environment: "{{proxy_env}}"

- name: Download Corkscrew tar file
  get_url: url={{corkscrew_url1}} dest={{corckscrew_dest}}
  environment: "{{proxy_env}}"
  ignore_errors: yes

- name: Download  corkscrew tar file
  get_url: url={{corkscrew_url2}} dest={{corkscrew_dest}}
  environment: "{{proxy_env}}"

- name: Extract downloaded file
  unarchive: src={{corkscrew_dest}}/corkscrew-2.0.tar.gz dest={{corkscrew_dest}}
#- name: set environment variable
#  command: ac_default_prefix=~/corkscrew-2.0/bin/corkscrew

- name: Run ./configugre
  command: ./configure
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines

- name: run make
  command: make
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines

- name: run make install
  command: make
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines


- name: create and configure ~/.ssh/config to clone bitbucket repo system model
  copy: src=ssh-config dest=~/.ssh/config mode=400


- name: clone systems-model repo from bitbucket
  git: repo="{{systems_model_repo}}" dest="{{systems_model_dest}}" version=develop



#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/vars/main.yml

corkscrew_dest: "/root/"
corkscrew_url1: http://www.agroman.net/corkscrew/corkscrew-2.0.tar.gz
corkscrew_url2: http://wiki.kartbuilding.net/corkscrew-2.0.tar.gz


#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/meta/main.yml

dependencies:
   - common-vars 


#+END_SRC
#+BEGIN_SRC yml :tangle roles/basesetup/files/ssh-config

Host altssh.bitbucket.org
User git
Port 443
Hostname altssh.bitbucket.org
TCPKeepAlive yes
IdentityFile "~/.ssh/id_rsa"
IdentitiesOnly yes
ProxyCommand corkscrew proxy.iiit.ac.in 8080 %h %p

#+END_SRC

#+BEGIN_SRC yml :tangle roles/basesetup/handlers/main.yml

- name: restart_ssh
  service: name=sshd state=restarted

#+END_SRC
** Automate OpenVZ setup
*** openvz role
#+BEGIN_SRC yml :tangle roles/opevz/tasks/main.yml 

---

- include: cloning.yml
- include: shellrun.yml
- include: copycode.yml
- include: edit.yml
- include: templatedownload.yml

#+END_SRC

#+BEGIN_SRC yml :tangle roles/openvz/tasks/cloning.yml

---
    - name: install git
      command: yum -y install git
      environment:
        http_proxy: http://proxy.iiit.ac.in:8080
        https_proxy: http://proxy.iiit.ac.in:8080
      register: out
    - debug: var=out.stdout_lines 


    - name: change directory
      command: git clone https://github.com/Raj-18110/setup-ovpl-centos.git
      ignore_errors: yes
      register: out
      args: 
        chdir: roles/openvz/files/
    - debug: var=out.stdout_lines


#+END_SRC
#+BEGIN_SRC yml :tangle roles/openvz/tasks/shellrun.yml

---

    - replace: 
          path: roles/openvz/files/setup-ovpl-centos/scripts/config.sh
          regexp: 'export http_proxy=""'
          replace: 'export http_proxy="http://proxy.iiit.ac.in:8080"'
     
    - replace: 
          path: roles/openvz/files/setup-ovpl-centos/scripts/config.sh
          regexp: 'export https_proxy=""'
          replace: 'export https_proxy="http://proxy.iiit.ac.in:8080"'


    
    - name: running shell command
      command: ./centos_prepare_ovpl.sh
      register: out 
      args: 
        chdir: roles/openvz/files/setup-ovpl-centos/scripts/
    - debug: var=out.stdout_lines


#+END_SRC

#+BEGIN_SRC yml :tangle roles/openvz/tasks/copycode.yml

---
- hosts: localhost
  become: yes
  become_method: "sudo" 
  tasks:
     - copy:
        content: "EXTERNAL_SCRIPT=\"/usr/sbin/vznetaddbr\" "
        dest: "/etc/vz/vznet.conf"

#+END_SRC

#+BEGIN_SRC yml :tangle roles/openvz/tasks/edit.yml

---
- hosts: localhost
  become: yes
  become_method: sudo
  tasks: 
    - replace: 
          path: /etc/sysctl.conf
          regexp: 'net.ipv4.ip_forward = 0'
          replace: 'net.ipv4.ip_forward = 1'
           
    - replace: 
          path: /etc/vz/conf/ve-vswap-256m.conf-sample 
          regexp: 'NETFILTER="stateless"'
          replace: 'NETFILTER="full"'


#+END_SRC

#+BEGIN_SRC yml :tangle roles/openvz/tasks/templatedownload.yml

    - name: downloading
      get_url:
         url: http://download.openvz.org/template/precreated/centos-6-x86_64.tar.gz
         dest: /vz/template/cache
      environment:
         http_proxy: http://proxy.iiit.ac.in:8080
         https_proxy: http://proxy.iiit.ac.in:8080


#+END_SRC

#+BEGIN_SRC yml :tangle roles/openvz/meta/main.yml

dependencies:
   - common-vars 

#+END_SRC




** Automate Cluster nodes/servers creation
*** Cluster role 

#+BEGIN_SRC yml :tangle roles/cluster/tasks/main.yml

---
    - name: creating cluster
      command: sh cluster.sh
      register: out
      args: 
         chdir: roles/cluster/files/ 
    - debug: var=out.stdout_lines


#+END_SRC

#+BEGIN_SRC yml :tangle roles/cluster/meta/main.yml

dependencies:
     - common-vars

#+END_SRC

#+BEGIN_SRC yml :tangle roles/cluster/files/cluster.sh

 cluster="{{clustername}}"
     public_bridge="br0"
     private_bridge="br1"
     for i in {1001..1010}
     do
     vzctl create $i  --ostemplate centos-6-x86_64
     if [ $i == 1001 ]
     then
     vzctl set $i --hostname router.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth0,,,,$public_bridge --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1002 ]
     then 
     vzctl set $i --hostname ansible.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth0,,,,$public_bridge --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1003 ]
     then
     vzctl set $i --hostname ossec-server.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     
     elif [ $i == 1004 ]
     then
     vzctl set $i --hostname rsyslog.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1005 ]
     then
     vzctl set $i --hostname privatedns.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     
     elif [ $i == 1006 ]
     then
     vzctl set $i --hostname publicdns.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1007 ]
     then
     vzctl set $i --hostname reverseproxy.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1008 ]
     then
     vzctl set $i --hostname nagios.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1009 ]
     then
     vzctl set $i --hostname ads.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --diskspace 20G --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     elif [ $i == 1010 ]
     then
     vzctl set $i --hostname rsnapshot.$cluster.vlabs.ac.in --save
     vzctl set $i --netif_add eth1,,,,$private_bridge --save
     vzctl start $i
     vzctl set $i --onboot yes --save
     fi
     done


#+END_SRC



** Automate Router node configuration
*** Router role
#+BEGIN_SRC yml :tangle roles/router/tasks/main.yml

---

- name: Set root password
  shell: vzctl set 1001 --userpasswd root:test

- name: copy interface ifcfg-eth0 file
  copy: src=ifcfg-eth0 dest=/vz/private/1001/etc/sysconfig/network-scripts/
  
- name: copy interface ifcfg-eth1 file
  copy: src=ifcfg-eth1 dest=/vz/private/1001/etc/sysconfig/network-scripts/

- name: Router's Network restart
  command: vzctl exec 1001 service network restart

- name: Set iptable rule 
  command: vzctl exec 1001 iptables -t nat -A POSTROUTING ! -d 10.100.0.0/22 -o eth0 -j SNAT --to-source 10.2.59.221

- name: iptables Saving 
  command: vzctl exec 1001 iptables-save > /etc/sysconfig/iptables

- name: ipv4 forwarding in router
  replace:
     path: /vz/private/1001/etc/sysctl.conf
     regexp: 'net.ipv4.ip_forward = 0'
     replace: 'net.ipv4.ip_forward = 1'

- name: reboot
  command: vzctl restart 1001
  register: out
- debug: var=out.stdout_lines


#+END_SRC

#+BEGIN_SRC yml :tangle roles/router/meta/main.yml

dependencies:
    - common-vars

#+END_SRC

#+BEGIN_SRC yml :tangle roles/router/files/ifcfg-eth0

DEVICE=eth0
TYPE=Ethernet
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.2.59.221
NETMASK=255.255.252.0
GATEWAY=10.2.56.1
DNS1=10.4.12.160
DNS2=10.4.12.220


#+END_SRC

#+BEGIN_SRC yml :tangle roles/router/files/ifcfg-eth1

DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.1
NETMASK=255.255.252.0


#+END_SRC

** Automate Config-server node configuration
*** config-server role
#+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml

---
 - name: installing ansible
   yum: name="{{item}}" state=latest
   environment: "{{proxy_env}}"
   with_items:
        - epel-release
        - ansible
        - git
 - name: Create vlead user and generate ssh-keys for vlead
   user: name=vlead password={{vlead_user_password}} generate_ssh_key=yes groups=wheel
 - name: Replacing wheel
   lineinfile:
       path: /etc/sudoers
       regexp: '^%wheel.*NOPASSWD: ALL.*'
       line: '%wheel        ALL=(ALL)       NOPASSWD: ALL'
       state: present
 - name: Set StrictHostkeyChecking to no
   lineinfile: path=/etc/ssh/ssh_config regexp="^Strict.*" line="StrictHostKeyChecking no" state=present
   notify: restart_ssh
 - name: Set PermitRootLogin to yes
   lineinfile: path=/etc/ssh/sshd_config regexp="^PermitRoot.*" line="PermitRootLogin yes" state=present
   notify: restart_ssh

 - name: Set PermitRootLogin to yes
   lineinfile: path=/etc/ssh/sshd_config regexp="^PasswordAuthentication.*" line="PasswordAuthentication yes" state=present
   notify: restart_ssh

 - name: Copy system-model repo from host-machine to ansible/config-serer container
   synchronize: src="{{systems_model_dest}}" dest=/home/vlead/

 - name: Update ownership permissions to systems-model repo
   file: path=/home/vlead/systems-model recurse=true owner=vlead group=vlead

 - name: install emacs
   yum: name=emacs state=installed
   environment: "{{proxy_env}}"


#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-server/meta/main.yml

dependencies:
   - common-vars

#+END_SRC   

#+BEGIN_SRC yml :tangle roles/config-server/files/ifcfg-eth0

DEVICE=eth0
TYPE=Ethernet
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.2.59.222
NETMASK=255.255.252.0
GATEWAY=10.2.56.1
DNS1=10.4.12.160
DNS2=10.4.12.220


#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-server/files/ifcfg-eth1

DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.2
NETMASK=255.255.252.0


#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-server/handlers/main.yml

---
- name: restart_ssh
  service: name=sshd state=restarted

#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-server/vars/main.yml

export_proxy:  export http_proxy="{{proxy_env.http_proxy}}" && export https_proxy="{{proxy_env.https_proxy}}"


#+END_SRC
*** Config-with-vlead-user

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/main.yml

# - name: Copy ssh keys
#   shell: sshpass -p "test" ssh-copy-id root@localhost
#   register: out
# - debug: var=out.stdout_lines
# - name: Copy ssh keys
#   shell: sshpass -p "test" ssh-copy-id root@127.0.0.1
#   register: out
# - debug: var=out.stdout_lines
# - name: Copy ssh keys
#   shell: sshpass -p "test" ssh-copy-id root@10.100.1.1
#   register: out
# - debug: var=out.stdout_lines
#
#tasks file for config-with-vlead-user
# - include: copy-sshkeys.yml
# - include: setupemacs.yml
# - include: changes_in_makefile.yml
#
#
# - name: change directory and run make file
#   command: make
#   register: out
#   args: 
#     chdir: ~/systems-model/
# - debug: var=out.stdout_lines
#
# - name: Copying build file 
#   command: sudo cp -r build/{{clustername}} /root/
#   register: out
#   args:
#    chdir: ~/systems-model/
# - debug: var=out.stdout_lines
#
# - name: checking syntax of ansible playbook
#   command: ansible-playbook -i hosts --list-tasks --syntax-check site.yaml
#   register: out
#   args:
#    chdir: ~/systems-model/build/{{clustername}}
# - debug: var=out.stdout_lines
 # - include: set-proxy.yml
 - include: public_dns.yml
                                                        

#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/copy-sshkeys.yml

---
 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@localhost
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@127.0.0.1
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.1
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.2
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.3
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.4
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.5
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.6
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.7
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.8
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.9
   register: out
 - debug: var=out.stdout_lines

 - name: Copy ssh keys
   shell: sshpass -p "test" ssh-copy-id root@10.100.1.10
   register: out
 - debug: var=out.stdout_lines



#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/setupemacs.yml

---

- name: Downloading Emacs
  file: path=emacs/lisp mode=0755 state=directory

- name: un-tar  downloaded file
  unarchive: src=http://orgmode.org/org-8.2.10.tar.gz dest=/home/vlead/emacs/lisp/ remote_src=True
  environment: "{{proxy_env}}"



#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/changes_in_makefile.yml

---
- replace:
      path: systems-model/makefile
      regexp: "ROUTER_IP=10.4.14.207"
      replace: "ROUTER_IP={{ipaddress.router}}"

- replace:
      path: systems-model/makefile
      regexp: "CONFIG_SERVER=10.4.14.208"
      replace: "CONFIG_SERVER={{ipaddress.config_server}}"


- replace:
      path: systems-model/makefile
      regexp: "CLUSTER=cluster"
      replace: "CLUSTER={{clustername}}"


- replace:
      path: systems-model/makefile
      regexp: "SMTP_SMART_HOST= smtp.admin.iiit.ac.in"
      replace: "SMTP_SMART_HOST=stpi-router.vlabs.ac.in"


#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/set-proxy.yml


- name: Copy set-proxy to ansible container
  template: src=set-proxy.yml dest=systems-model/build/{{clustername}}/

- name: Run  set-proxy.yml file to set proxy in all other containers
  command: ansible-playbook -i hosts set-proxy.yml
  register: out
  args:
    chdir: systems-model/build/{{clustername}}/
- debug: var=out.stdout_lines

#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/public_dns.yml

---
- name: Commenting rsnapshot_client
  lineinfile:
     path: systems-model/build/{{clustername}}/public_dns.yaml
     regexp: '- rsnapshot_client'
     line: '# - rsnapshot_clients'


- name: Commenting ossec_client
  lineinfile:
     path: systems-model/build/{{clustername}}/public_dns.yaml
     regexp: '- ossec_client'
     line: '# - ossec_clients'

- name: Commenting rsnapshot_client
  lineinfile:
     path: systems-model/build/{{clustername}}/private_dns.yaml
     regexp: '- rsnapshot_client'
     line: '# - rsnapshot_clients'


- name: Commenting ossec_client
  lineinfile:
     path: systems-model/build/{{clustername}}/private_dns.yaml
     regexp: '- ossec_client'
     line: '# - ossec_clients'


- name: Running public_dns playbook
  command: ansible-playbook -i hosts public_dns.yaml
  #environment: "{{proxy_env}}"
  register: out
  args:
    chdir: systems-model/build/{{clustername}}/
- debug:
    var: out


- name: Running private_dns playbook
  command: ansible-playbook -i hosts private_dns.yaml
  #environment: "{{proxy_env}}"

#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/handlers/main.yml

---
# handlers file for config-with-vlead-user
- name: restart_ssh
  service: name=sshd state=restarted


#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/meta/main.yml

dependencies:
   - common-vars

#+END_SRC

#+BEGIN_SRC yml :tangle roles/config-with-vlea-user/templates/set-proxy.yml

---
- hosts: private_dns
  remote_user: root

  tasks: 
  - name: Delete proxy if there is any
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
  - name: set proxy
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: public_dns
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: ossec_server
  remote_user: root

  tasks: 

   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: rsyslog_server
  remote_user: root

  tasks: 

   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: reverseproxy_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: nagios_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: ads_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: rsnapshot_server
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


#+END_SRC


** Automate DNS servers node configuration
*** Public DNS server role
#+BEGIN_SRC yml :tangle roles/public-dns-server/tasks/main.yml

---
- name: Set root password
  command: vzctl set 1006 --userpasswd root:test

- name: copy interface ifcfg-eth1 file
  copy: src=ifcfg-eth1 dest=/vz/private/1006/etc/sysconfig/network-scripts/

- name: Public-dns-server Network restart
  command: vzctl exec 1006 service network restart


#+END_SRC

#+BEGIN_SRC yml :tangle roles/public-dns-server/meta/main.yml

dependencies:
    - common-vars

#+END_SRC

#+BEGIN_SRC yml :tangle roles/public-dns-server/files/ifcfg-eth1

DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.6
GATEWAY=10.100.1.1
NETMASK=255.255.252.0



#+END_SRC

*** Private DNS server role

#+BEGIN_SRC yml :tangle roles/private-dns-server/tasks/main.yml

---
- name: Set root password
  command: vzctl set 1005 --userpasswd root:test

- name: copy interface ifcfg-eth1 file
  copy: src=ifcfg-eth1 dest=/vz/private/1005/etc/sysconfig/network-scripts/

- name:  Network restart
  command: vzctl exec 1005 service network restart


#+END_SRC

#+BEGIN_SRC yml :tangle roles/private-dns-server/files/ifcfg-eth1

DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.5
GATEWAY=10.100.1.1
NETMASK=255.255.252.0


#+END_SRC

#+BEGIN_SRC yml :tangle roles/private-dns-server/meta/main.yml

dependencies:
    - common-vars

#+END_SRC

** Automate Ossec server node configuration
*** ossec server role

#+BEGIN_SRC yml :tangle roles/ossec-server/tasks/main.yml

---
- name: Set root password
  command: vzctl set 1003 --userpasswd root:test

- name: copy interface ifcfg-eth1 file
  copy: src=ifcfg-eth1 dest=/vz/private/1003/etc/sysconfig/network-scripts/

- name: ossec-server Network restart
  command: vzctl exec 1003 service network restart 

#+END_SRC

#+BEGIN_SRC yml :tangle roles/ossec-server/meta/main.yml

dependencies:
   - common-vars


#+END_SRC


#+BEGIN_SRC yml :tangle roles/ossec-server/files/ifcfg-eth1

DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.3
GATEWAY=10.100.1.1
NETMASK=255.255.252.0


#+END_SRC


** Automate Reverse proxy node configuration
*** reverse-proxy role


** Automate nagios node configuration
*** nagios role
** Automate ADS setup
*** ads role
** Automate rsnapshot node configuration
*** rsnapshot role

  


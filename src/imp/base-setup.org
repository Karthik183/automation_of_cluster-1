#+Title: Implementation of base machine setup
#+Author: Systems Team
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document describes the implementation/automation of base
  machine's setup.
* Implementation
** Base Machine Setup
   =basesetup= role contains following ansible playbooks. Each
   playbook is included in =main.yml= file. The =main.yml= is the main
   play book to setup base machine. The =main.yml= playbook runs other playbooks
   included in it in a sequential order
*** =main.yml=
#+BEGIN_SRC yml :tangle roles/basesetup/tasks/main.yml
---
# tasks file for basesetup
- include: eth0.yml
- include: br0.yml
- include: br1.yml
- include: ssh-keys.yml
- include: corkscrew_installation.yml

#+End_SRC
    Above included playbooks  are  described clearly below.

*** =br0.yml= br0 interface creation
    - The following playbook =br0.yml= creates =br0= interface for
      host machine. It copies the block part described in the file to
      destination specified in path. If the file mentioned in path
      already contains data, then it replaced with the new data is
      included in that file as mentioned below.
#+BEGIN_SRC yml :tangle roles/basesetup/tasks/br0.yml
---
   - copy:  
       content: ""      
       dest: "/etc/sysconfig/network-scripts/ifcfg-br0"
   
      
   - name: creating br0 bridge
     blockinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-br0
        block: |
         DEVICE=br0
         BOOTPROTO=static
         ONBOOT=yes
         TYPE=Bridge
         NM_CONTROLLED=no
         IPADDR={{ipaddress.hostmachine}}
         NETMASK={{net_mask}}
         GATEWAY={{internet_gateway}}
         DNS1={{dnsaddress.dns1}}
         DNS2={{dnsaddress.dns2}}

   - name: Netwwork restart
     service: name=network state=restarted 

...
 
#+END_SRC

*** =eth0.yml= creates eth0 interface on host machine.
    Similar to above file,this also does the same work.Copies the
    content to =ifcfg-eth0= file. If it is empty just copies else it
    makes it empty and then copies code.
#+BEGIN_SRC yml :tangle roles/basesetup/tasks/eth0.yml
---
   
   - copy: 
      content: ""      
      dest: "/etc/sysconfig/network-scripts/ifcfg-eth0" 
  
   - name: creating
     blockinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        block: |
         DEVICE=eth0
         TYPE=Ethernet
         ONBOOT=yes
         NM_CONTROLLED=no
         BOOTPROTO=none
         BRIDGE=br0

...
    
#+END_SRC

*** =br1.yml= Creates br1 interface on host machine and restart network
    Copies the content in block part to the destination mentioned in
    =path=. Then network restart and shuts network-manager off
    and restarts.
#+BEGIN_SRC yml :tangle roles/basesetup/tasks/br1.yml
---

  - copy: 
     content: ""      
     dest: "/etc/sysconfig/network-scripts/ifcfg-br1"
      
  - name: creating Br1 file
    blockinfile:
       path: /etc/sysconfig/network-scripts/ifcfg-br1
       block: |
        DEVICE=br1
        TYPE=Bridge
        ONBOOT=yes
        NM_CONTROLLED=no
        BOOTPROTO=none

  - service:
     name: network
     state: restarted


  - name: Manager off
    command: chkconfig NetworkManager off
    register: out
  - debug: var=out.stdout_lines

  - name: Manager on
    command: chkconfig network on
    register: out
  - debug: var=out.stdout_lines

  - name: Running brctl show command
    command: brctl show
    register: out
  - debug: var=out.stdout_lines

#+END_SRC

***  =ssh-keys.yml= 
     Generates ssh-keys in host machine and modifies =ssh_Config= file
     to change =stricthostkeychecking= to =no=
#+BEGIN_SRC yml :tangle roles/basesetup/tasks/ssh-keys.yml
---
- name: ssh-key generate
  user: name=root generate_ssh_key=yes

- name: Strict host check no
  lineinfile: path=/etc/ssh/ssh_config regexp="^Strict.*" line="StrictHostKeyChecking no" state=present
  notify: restart_ssh

#+END_SRC

*** =corkscrew_installation.yml= 
    Install corkscrew and its dependencies. Corckscrew is needed when
    network blocks outgoing =ssh= port over =the http_proxy=.
   
    Purpose of installing corckscrew here is, need to clone
    [[https://bitbucket.org/vlead/systems-model][systems-model]] from bitbucket over =http+ssh=. In this case,
    corkscrew is needed to clone repository.

    *To run this ansible playbook/script, host machine's public_key
    =id_rsa.pub= should be added in [[https://bitbucket.org/vlead/systems-model/admin/access-keys/][access keys on bitbucket.org]]
    manually*.

#+BEGIN_SRC yml :tangle roles/basesetup/tasks/corkscrew_installation.yml
---
- name: Install Development tools
  command: yum groupinstall "Development tools" -y
- name: Install python-pip
  yum: name=python-pip state=installed

- name: install passlib
  pip: name=passlib
  environment: "{{proxy_env}}"

- name: install wget
  yum: name=wget state=installed
  environment: "{{proxy_env}}"

- name: Download Corkscrew tar file
  get_url: url={{corkscrew_url1}} dest={{corckscrew_dest}}
  environment: "{{proxy_env}}"
  ignore_errors: yes

- name: Download  corkscrew tar file
  get_url: url={{corkscrew_url2}} dest={{corkscrew_dest}}
  environment: "{{proxy_env}}"

- name: Extract downloaded file
  unarchive: src={{corkscrew_dest}}/corkscrew-2.0.tar.gz dest={{corkscrew_dest}}

- name: Run ./configugre
  command: ./configure
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines

- name: run make
  command: make
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines

- name: run make install
  command: make
  args:
    chdir: "{{corkscrew_dest}}/corkscrew-2.0/"
  register: out
- debug: var=out.stdout_lines


- name: create and configure ~/.ssh/config to clone bitbucket repo system model
  template: src=ssh-config dest=~/.ssh/config mode=400


- name: clone systems-model repo from bitbucket
  git: repo="{{systems_model_repo}}" dest="{{systems_model_dest}}" version=develop

#+END_SRC

*** =dependencies=
     Meta directory is to use other roles variables in local role.
#+BEGIN_SRC yml :tangle roles/basesetup/meta/main.yml

dependencies:
   - common-vars 


#+END_SRC

*** =ssh-config= 
    This file contains all necessary data needed to clone a repository
    systems-model from http://bitbucket.org

#+BEGIN_SRC yml :tangle roles/basesetup/templates/ssh-config
Host altssh.bitbucket.org
User git
Port 443
Hostname altssh.bitbucket.org
TCPKeepAlive yes
IdentityFile "~/.ssh/id_rsa"
IdentitiesOnly yes
ProxyCommand corkscrew {{corkscrew_proxy}} {{proxy_port}} %h %p

#+END_SRC

*** =Handlers= 
    Handlers comes into play when there is a notify statement in task
    files.

#+BEGIN_SRC yml :tangle roles/basesetup/handlers/main.yml

- name: restart_ssh
  service: name=sshd state=restarted

#+END_SRC

** Setup Virtualization on host machine
*** OpenVZ Virtualization
**** =main.yml=
     =main.yml= contains various included playbooks which are needed
     for OpenVZ virtualization setup. Purpose of each included
     playbook is described below the =main.yml= file.
#+BEGIN_SRC yml :tangle roles/openvz/tasks/main.yml 
---
# tasks file for openvz
- include: clone.yml
- include: install-openvz.yml
- include: openvz-config.yml


#+END_SRC

**** =clone.yml=
    - This script =clone.yml= installs =git=. 
    - Clones [[./https://github.com/vlead/cluster-setup-ovpl-centos][cluster-setup-ovpl-centos]] repository from
      http://github.com and saves it in destination mentioned in
      =dest= parameter. 
 
#+BEGIN_SRC yml :tangle roles/openvz/tasks/clone.yml

---
    - name: install git
      yum: name=git state=installed
      environment: "{{proxy_env}}"
      register: out
    - debug: var=out.stdout_lines 


    - name: change directory to 
      git: 
         repo: "{{setup_ovpl_centos}}"
         dest: ~/
         version: master
      ignore_errors: yes
      register: out
    - debug: var=out.stdout_lines
      

#+END_SRC

**** =install-openvz=
     Following script does 
     - Exports network proxy through a =proxy_env.http_proxy=
       variable. It is defined in [[./common-vars.org][common-vars]] file.
     - Installs =OpenVZ= through a shell script called
       =./centos_prepare_ovpl.sh=
     

#+BEGIN_SRC yml :tangle roles/openvz/tasks/install-openvz.yml

---

    - replace: 
          path: ~/cluster-setup-ovpl-centos/scripts/config.sh
          regexp: 'export http_proxy=""'
          replace: 'export http_proxy="{{proxy_env.http_proxy}}"'
     
    - replace: 
          path: ~/cluster-setup-ovpl-centos/scripts/config.sh
          regexp: 'export https_proxy=""'
          replace: 'export https_proxy="{{proxy_env.https_proxy}}"'


    
    - name: running shell command
      command: ./centos_prepare_ovpl.sh
      register: out 
      args: 
        chdir: ~/cluster-setup-ovpl-centos/scripts/
    - debug: var=out.stdout_lines


#+END_SRC

**** =openvz-config.yml=
     Following script does 
     - Sets to =net.ipv4.ip_forward = 1= to enable packet forwarding for
       IPv4
     - Sets to =NETFILTER="full"= to Restrict access to
       netfilter/iptables modules for a container
#+BEGIN_SRC yml :tangle roles/openvz/tasks/openvz-config.yml
---
    - replace: 
          path: /etc/sysctl.conf
          regexp: 'net.ipv4.ip_forward = 0'
          replace: 'net.ipv4.ip_forward = 1'
           
    - replace: 
          path: /etc/vz/conf/ve-vswap-256m.conf-sample 
          regexp: 'NETFILTER="stateless"'
          replace: 'NETFILTER="full"'

    - copy:
       content: "EXTERNAL_SCRIPT=\"/usr/sbin/vznetaddbr\" "
       dest: "/etc/vz/vznet.conf"

#+END_SRC

**** =Dependencies=
      Dependencies are required when taking variables from other
      roles.
#+BEGIN_SRC yml :tangle roles/openvz/meta/main.yml

dependencies:
   - common-vars 

#+END_SRC


 



     
